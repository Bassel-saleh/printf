#include "main.h"
#include <stdarg.h>
/**
 * print_char - prints char
 * @var: specifier list
 * Return: i which is 1 if a char was printed
 */
int print_char(va_list var)
{
	int c;

	c = va_arg(var, int);
	/*if (c != 0)*/
	_putchar(c);
	return (1);
}
#include "main.h"
#include <stdarg.h>

/**
 * _printf - Custom printf function
 * @format: The format string
 * Return: Number of characters printed
 */
int _printf(const char *format, ...)
{
	va_list var;
	int count = 0;

	if (format)
	{
		va_start(var, format);
		count = _print_format(format, var);
		va_end(var);
	}
	return (count);
}

/**
 * _handle_percent - Handle the '%' character
 * @format: The format string
 * @var: The va_list to access arguments
 * @count: Pointer to the character count
 */
void _handle_percent(const char **format, va_list var, int *count)
{
	(*format)++;
	if (**format == '%')
	{
		(*count)++;
		_putchar('%');
	}
	else
	{
		_process_format(format, var, count);
	}
}

/**
 * _process_format - Process format specifiers
 * @format: The format string
 * @var: The va_list to access arguments
 * @count: Pointer to the character count
 */
void _process_format(const char **format, va_list var, int *count)
{
	char spec = **format;

	switch (spec)
	{
		case 'c':
			*count += print_char(var);
			break;
		case 's':
			*count += print_str(var);
			break;
		case 'd':
		case 'i':
			*count += print_int(var);
			break;
		case 'u':
			*count += print_uint(var);
			break;
		case 'o':
			*count += print_oct(var);
			break;
		case 'x':
			*count += print_hex(var);
			break;
		case 'X':
			*count += print_HEX(var);
			break;
		case 'p':
			*count += print_pointer(var);
			break;
		default:
			*count += _putchar('%');
	}
}

/**
 * _print_format - Handle the format string and print characters
 * @format: The format string
 * @var: The va_list to access arguments
 * Return: Number of characters printed
 */
int _print_format(const char *format, va_list var)
{
	int count = 0;

	while (*format)
	{
		if (*format == '%')
		{
			_handle_percent(&format, var, &count);
		}
		else
		{
			count++;
			_putchar(*format);
		}
		format++;
	}

	return (count);
}
#include "main.h"
/**
 * print_int - Handle %d and %i format specifiers
 * @var: va_list containing the integer argument
 * Return: Number of characters printed
 */
int print_int(va_list var)
{
	int num = va_arg(var, int);
	int count = 0;

	num < 0 ? (count += _putchar('-'), num = -num) : 0;
	count += print_dec(num);
	return (count);
}

/**
 * print_uint - Handle %u format specifier
 * @var: va_list containing the unsigned integer argument
 * Return: Number of characters printed
 */
int print_uint(va_list var)
{
	unsigned int num = va_arg(var, unsigned int);

	return (print_unsign(num));
}

/**
 * print_oct - Handle %o format specifier
 * @var: va_list containing the unsigned integer argument
 * Return: Number of characters printed
 */
int print_oct(va_list var)
{
	unsigned int num = va_arg(var, unsigned int);

	return (print_octal(num));
}

/**
 * print_hex - Handle %x format specifiers
 * @var: va_list containing the unsigned integer argument
 * Return: Number of characters printed
 */
int print_hex(va_list var)
{
	unsigned int num = va_arg(var, unsigned int);

	return (print_hexadecimal(num, 0));
}

/**
 * print_HEX - Handle %X format specifiers
 * @var: va_list containing the unsigned integer argument
 * Return: Number of characters printed
 */
int print_HEX(va_list var)
{
	unsigned int num = va_arg(var, unsigned int);

	return (print_hexadecimal(num, 1));
}
#include "main.h"
/**
 * print_dec - Print a decimal integer
 * @n: The integer to be printed
 * Return: Number of characters printed
 */
int print_dec(int n)
{
	int count = 0;
	unsigned int num;

	if (n < 0)
	{
		_putchar('-');
		num = -n;
		count++;
	}
	else
	{
		num = n;
	}
	if (num / 10 != 0)
	{
		count += print_dec(num / 10);
	}
	_putchar((num % 10) + '0');
	count++;
	return (count);
}

/**
 * print_hexadecimal - Print an unsigned integer in hexadecimal format
 * @n: The unsigned integer to be printed
 * @uppercase: whether to use uppercase or not
 * Return: Number of characters printed
 */
int print_hexadecimal(unsigned int n, int uppercase)
{
	int count = 0;
	char hex_digits[] = "0123456789abcdef";
	char buffer[32];
	int i;

	if (uppercase)
	{
		for (i = 0; i < 16; i++)
		{
			if (hex_digits[i] >= 'a' && hex_digits[i] <= 'f')
			{
				hex_digits[i] = hex_digits[i] - 'a' + 'A';
			}
		}
	}
	i = 0;

	if (n == 0)
	{
		_putchar('0');
		count++;
	}
	else
	{
		while (n != 0)
		{
			buffer[i] = hex_digits[n % 16];
			n /= 16;
			i++;
		}
		for (i--; i >= 0; i--)
		{
			_putchar(buffer[i]);
			count++;
		}
	}
	return (count);
}

/**
 * print_unsign - Print an unsigned integer
 * @n: The unsigned integer to be printed
 * Return: Number of characters printed
 */
int print_unsign(unsigned int n)
{
	int count = 0;

	if (n / 10 != 0)
	{
		count += print_unsign(n / 10);
	}
	_putchar((n % 10) + '0');
	count++;
	return (count);
}
#include "main.h"
/**
 * print_octal - Print an unsigned integer in octal format without leading 0
 * @n: The unsigned integer to be printed
 * Return: Number of characters printed
 */
int print_octal(unsigned int n)
{
	int count = 0;

	if (n == 0)
	{
		_putchar('0');
		count++;
	}
	else
	{
		count += print_octal_helper(n);
	}
	return (count);
}

/**
 * print_octal_helper - helps print_octal print correctly
 * @n: is the number to be modified
 * Return: count
 */
int print_octal_helper(unsigned int n)
{
	int count = 0;

	if (n / 8 != 0)
	{
		count += print_octal_helper(n / 8);
	}
	_putchar((n % 8) + '0');
	count++;
	return (count);
}
#include "main.h"
/**
 * print_pointer - Handle %p format specifier
 * @var: va_list containing the pointer argument
 * Return: Number of characters printed
 */
int print_pointer(va_list var)
{
	void *ptr = va_arg(var, void *);
	int width, count = 0;
	unsigned long ptr_value = (unsigned long)ptr;

	_putchar('0');
	_putchar('x');
	count += 2;
	width = 0;
	while (ptr_value > 0)
	{
		ptr_value /= 16;
		width++;
	}
	count += print_hexadecimal_padded((unsigned long)ptr, width);
	return (count);
}

/**
 * print_hexadecimal_padded - Print an unsigned integer
 * in hexadecimal format with padding
 * @n: The unsigned integer to be printed
 * @width: Minimum width of the output
 * Return: Number of characters printed
 */
int print_hexadecimal_padded(unsigned long n, int width)
{
	int count = 0;
	char hex_digits[] = "0123456789abcdef";
	char buffer[32];
	int zerostoadd, j, i = 0;

	if (n == 0)
	{
		buffer[i++] = '0';
	}
	else
	{
		while (n != 0)
			{
			buffer[i++] = hex_digits[n % 16];
			n /= 16;
			}
	}
	if (i < width)
	{
		zerostoadd = width - i;
		for (j = 0; j < zerostoadd; j++)
		{
			_putchar('0');
			count++;
		}
	}
	for (i--; i >= 0; i--)
	{
		_putchar(buffer[i]);
		count++;
	}
	return (count);
}
#include "main.h"
#include <stdarg.h>
/**
 * print_str - Print a string
 * @var: The va_list containing the string argument
 * Return: Number of characters printed
 */
int print_str(va_list var)
{
	char *str;
	int i, count = 0;
	char *nil = "(null)";

	str = va_arg(var, char *);
	if (str == 0)
	{
		for (i = 0; nil[i] != '\0'; i++)
			count += _putchar(nil[i]);
	}
	else
	{
		while (str && *str)
		{
			count += _putchar(*str);
			str++;
		}
	}
	return (count);
}
#include "main.h"
#include <unistd.h>
/**
 * _putchar - print char
 * @c: the character to be printed
 * Return: the character
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
